"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from decouple import config
from pathlib import Path
from supabase import create_client



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n)23@bp=w5#v&4og%)(piv1r(iurp_coai9gzp=m9pb4_u)_(^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # bibliotecas
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_spectacular',
    'dj_rest_auth',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth.registration',

    # Local
    'users',
    'events',
    'item',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_USER_MODEL = 'users.Usuario'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Configuration
# --------------------------------------------------------------------------
# Lista de origens que têm permissão para fazer requisições cross-site.
# Ideal para produção, listando apenas os domínios do seu frontend.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:9000",
    "http://127.0.0.1:9000",
]

# Django REST Framework Configuration
# --------------------------------------------------------------------------
# This tells Django REST Framework that all API views should, by default,
# use JWT for authentication.
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # This ensures that, by default, API endpoints are accessible for read
    # operations (GET, HEAD, OPTIONS) without authentication, but require
    # authentication for write operations (POST, PUT, PATCH, DELETE).
    # This is a flexible default for many projects.
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_SCHEMA_CLASS': 'core.schema.AppNameAutoSchema',
}

# dj-rest-auth Configuration
# --------------------------------------------------------------------------
REST_AUTH = {
    # This is the key setting. It tells dj-rest-auth to use JWT for its
    # login/logout/registration endpoints, which makes it stop looking for
    # the default 'rest_framework.authtoken' model and resolves the error.
    'USE_JWT': True,
    # Explicitly tell dj-rest-auth not to use a token model from the database,
    # which is the correct behavior for JWT.
    'TOKEN_MODEL': None,
    # This ensures the refresh token is sent in the response body, which is
    # easier for JavaScript frontends to handle.
    'JWT_AUTH_HTTPONLY': False,
    # This tells dj-rest-auth to use your custom serializer to add extra
    # claims (like username and email) to the JWT.
    'JWT_TOKEN_CLAIMS_SERIALIZER': 'users.serializers.MyTokenObtainPairSerializer',
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
    'USER_DETAILS_SERIALIZER': 'users.serializers.UsuarioSerializer',
}

# django-allauth Configuration 
# --------------------------------------------------------------------------
SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = 'none'   # dev; em prod usar 'optional' ou 'mandatory'

ACCOUNT_LOGIN_METHODS = {'username', 'email'}   


ACCOUNT_SIGNUP_FIELDS = {
    'username': {'required': True},
    'email':    {'required': True},
    'password1':{'required': True},
    'password2':{'required': True},
}

ACCOUNT_UNIQUE_EMAIL = True

# drf-spectacular Configuration
# --------------------------------------------------------------------------
SPECTACULAR_SETTINGS = {
    'TITLE': 'Te Liga! API',
    'DESCRIPTION': 'Documentação da API do projeto Te Liga!',
    'VERSION': '1.0.0',
    # Adiciona a opção de autenticação JWT no Swagger UI
    'COMPONENT_SCHEMAS': {
        'securitySchemes': {
            'BearerAuth': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
            }
        }
    },
    'SECURITY': [{'BearerAuth': []}],
    
}
# --------------------------------------------------------------------------
# Configurações Adicionais (JWT e Mídia)
# --------------------------------------------------------------------------

# Configurações do Simple JWT para aumentar a validade do token
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# Configuração para servir arquivos de mídia (Imagens, etc.)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# Supabase
# --------------------------------------------------------------------------
SUPABASE_URL = config("SUPABASE_URL")
SUPABASE_KEY = config("SUPABASE_KEY")

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)